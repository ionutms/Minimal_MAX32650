name: Generate KiCad Schematic Jobs
on:
  push:
    branches: [ main ]
    paths:
      - 'minimal_max32650/*.kicad_sch'
      - 'minimal_max32650/*.kicad_pro'
  workflow_dispatch:  # Allows manual triggering

jobs:
  generate-schematic-jobs-only:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Verify project files
        id: verify-files
        run: |
          # List directory contents to see what we're working with
          echo "Repository contents:"
          ls -la
          
          echo "Project directory contents:"
          ls -la minimal_max32650/ || echo "Directory not found"
          
          # Find KiCad project and schematic files
          PROJECT_FILE=$(find . -name "*.kicad_pro" | grep -i "minimal_max32650" | head -n 1)
          SCHEMATIC_FILE=$(find . -name "*.kicad_sch" | grep -i "minimal_max32650" | head -n 1)
          
          if [ -z "$PROJECT_FILE" ]; then
            echo "❌ KiCad project file (.kicad_pro) not found!"
            echo "project_found=false" >> $GITHUB_OUTPUT
            exit 0  # Don't fail the workflow yet
          else
            echo "✅ Found KiCad project file: $PROJECT_FILE"
            echo "project_file=$PROJECT_FILE" >> $GITHUB_OUTPUT
            echo "project_found=true" >> $GITHUB_OUTPUT
          fi
          
          if [ -z "$SCHEMATIC_FILE" ]; then
            echo "❌ KiCad schematic file (.kicad_sch) not found!"
            echo "schematic_found=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Found KiCad schematic file: $SCHEMATIC_FILE"
            echo "schematic_file=$SCHEMATIC_FILE" >> $GITHUB_OUTPUT
            echo "schematic_found=true" >> $GITHUB_OUTPUT
            
            # Extract project name from file path
            PROJECT_NAME=$(basename "$SCHEMATIC_FILE" .kicad_sch)
            echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          fi
          
          # Create output directory for schematics
          mkdir -p "schematics"
      
      - name: Skip if project files not found
        if: steps.verify-files.outputs.project_found != 'true' || steps.verify-files.outputs.schematic_found != 'true'
        run: |
          echo "Required KiCad project files not found. Skipping schematic generation."
          exit 0
      
      - name: Try to list schematic jobs
        id: list-jobs
        if: steps.verify-files.outputs.project_found == 'true'
        run: |
          echo "Attempting to list schematic jobs..."
          
          # Check Docker availability
          docker --version || (echo "Docker not available" && exit 1)
          
          # Try to list jobs with verbose output
          docker run --rm \
            -v ${{ github.workspace }}:/kicad_project \
            kicad/kicad:9.0 \
            bash -c "ls -la /kicad_project && echo 'Trying to list jobs:' && kicad-cli sch export jobs --list /kicad_project/${{ steps.verify-files.outputs.project_file }} || echo 'Command failed with exit code $?'"
          
          # Since the above might fail, let's assume no jobs for now and let the direct PDF export handle things
          echo "has_jobs=false" >> $GITHUB_OUTPUT
      
      - name: Generate PDF schematic (direct approach)
        if: steps.verify-files.outputs.schematic_found == 'true'
        run: |
          echo "Generating PDF schematic directly..."
          
          # Use direct PDF export approach (most reliable)
          docker run --rm \
            -v ${{ github.workspace }}:/kicad_project \
            kicad/kicad:9.0 \
            kicad-cli sch export pdf \
            --output "/kicad_project/schematics/${{ steps.verify-files.outputs.project_name }}-schematic.pdf" \
            "/kicad_project/${{ steps.verify-files.outputs.schematic_file }}"
          
          # Check if PDF was generated
          if [ -f "schematics/${{ steps.verify-files.outputs.project_name }}-schematic.pdf" ]; then
            echo "✅ PDF schematic generated successfully"
          else
            echo "❌ Failed to generate PDF schematic"
            
            # Try alternative approach with setsoft/kicad_auto
            echo "Trying alternative approach with KiBot..."
            docker run --rm \
              -v ${{ github.workspace }}:/kicad_project \
              setsoft/kicad_auto:latest \
              kibot -e "/kicad_project/${{ steps.verify-files.outputs.schematic_file }}" \
              -d /kicad_project/schematics \
              -s all pdf_sch_print
          fi
      
      - name: Check for generated files
        run: |
          echo "Checking for generated schematic files..."
          ls -la schematics/ || echo "No schematics directory found"
          
          # Count number of files generated
          FILE_COUNT=$(find schematics -type f | wc -l)
          
          if [ "$FILE_COUNT" -gt 0 ]; then
            echo "✅ Generated $FILE_COUNT schematic file(s)"
          else
            echo "❌ No schematic files were generated"
            exit 1
          fi
      
      - name: Upload schematic outputs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: schematic-outputs
          path: schematics/
          retention-days: 7
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Commit schematic outputs to repository
        run: |
          git add schematics/
          
          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update schematic outputs [skip ci]"
            git push
          fi
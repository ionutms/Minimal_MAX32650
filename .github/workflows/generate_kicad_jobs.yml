name: Generate KiCad Documentation
on:
  # push:
  #   branches: [ main ]
  workflow_dispatch:

jobs:
  generate-kicad-outputs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Verify project files
        id: verify-files
        run: |
          echo "Repository contents:"
          ls -la
          echo "Project directory contents:"
          ls -la minimal_max32650/ || echo "Directory not found"
          
          PROJECT_FILE=$(find . -name "*.kicad_pro" | grep -i "minimal_max32650" | head -n 1)
          SCHEMATIC_FILE=$(find . -name "*.kicad_sch" | grep -i "minimal_max32650" | head -n 1)
          PCB_FILE=$(find . -name "*.kicad_pcb" | grep -i "minimal_max32650" | head -n 1)
          
          if [ -z "$PROJECT_FILE" ]; then
            echo "❌ KiCad project file (.kicad_pro) not found!"
            echo "project_found=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "✅ Found KiCad project file: $PROJECT_FILE"
            echo "project_file=$PROJECT_FILE" >> $GITHUB_OUTPUT
            echo "project_found=true" >> $GITHUB_OUTPUT
          fi
          
          if [ -z "$SCHEMATIC_FILE" ]; then
            echo "❌ KiCad schematic file (.kicad_sch) not found!"
            echo "schematic_found=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Found KiCad schematic file: $SCHEMATIC_FILE"
            echo "schematic_file=$SCHEMATIC_FILE" >> $GITHUB_OUTPUT
            echo "schematic_found=true" >> $GITHUB_OUTPUT
            PROJECT_NAME=$(basename "$SCHEMATIC_FILE" .kicad_sch)
            echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          fi
          
          if [ -z "$PCB_FILE" ]; then
            echo "❌ KiCad PCB file (.kicad_pcb) not found!"
            echo "pcb_found=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Found KiCad PCB file: $PCB_FILE"
            echo "pcb_file=$PCB_FILE" >> $GITHUB_OUTPUT
            echo "pcb_found=true" >> $GITHUB_OUTPUT
          fi
  
      - name: Skip if project files not found
        if: steps.verify-files.outputs.project_found != 'true'
        run: |
          echo "Required KiCad project files not found. Skipping documentation generation."
          exit 0

      - name: Create output directories with proper permissions
        if: steps.verify-files.outputs.project_found == 'true'
        run: |
          mkdir -p schematics
          mkdir -p docs/pictures
          chmod -R 777 ${{ github.workspace }}
      
      - name: Generate PDF schematic
        id: pdf-temp-dir
        if: steps.verify-files.outputs.schematic_found == 'true'
        continue-on-error: true
        run: |
          echo "Generating PDF in container's temporary directory first..."
          
          docker run --rm -u $(id -u):$(id -g) \
            -v ${{ github.workspace }}:/kicad_project \
            -e HOME=/tmp/home \
            kicad/kicad:9.0 \
            bash -c "mkdir -p /tmp/home/.config/kicad/9.0/colors && \
                     export HOME=/tmp/home && \
                     mkdir -p /tmp && \
                     kicad-cli sch export pdf \
                     --output '/tmp/schematic.pdf' \
                     '/kicad_project/${{ steps.verify-files.outputs.schematic_file }}' && \
                     mkdir -p /kicad_project/schematics && \
                     cp /tmp/schematic.pdf '/kicad_project/schematics/${{ steps.verify-files.outputs.project_name }}_schematic.pdf'"
          
          if [ -f "schematics/${{ steps.verify-files.outputs.project_name }}_schematic.pdf" ]; then
            echo "✅ PDF schematic generated successfully"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to generate PDF schematic"
            echo "success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Render PCB 3D view
        id: render-pcb
        if: steps.verify-files.outputs.pcb_found == 'true'
        continue-on-error: true
        run: |
          echo "Rendering PCB 3D view..."
          
          # Create docs/pictures directory if it doesn't exist
          mkdir -p docs/pictures
          
          docker run --rm -u $(id -u):$(id -g) \
            -v ${{ github.workspace }}:/kicad_project \
            -e HOME=/tmp/home \
            kicad/kicad:9.0 \
            bash -c "mkdir -p /tmp/home && \
                     export HOME=/tmp/home && \
                     cd /kicad_project && \
                     mkdir -p /kicad_project/docs/pictures && \
                     echo 'Starting PCB render...' && \
                     kicad-cli pcb render ${{ steps.verify-files.outputs.pcb_file }} \
                     -o /kicad_project/docs/pictures/${{ steps.verify-files.outputs.project_name }}_side.png \
                     --background transparent \
                     --quality high \
                     --zoom 1 \
                     --pan "0,0,0" && \
                     echo 'PCB render completed'"
          
          if [ -f "docs/pictures/${{ steps.verify-files.outputs.project_name }}_side.png" ]; then
            echo "✅ PCB render generated successfully"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to generate PCB render"
            echo "success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Check for generated files
        run: |
          echo "Checking for generated output files..."
          
          echo "Schematic PDFs:"
          ls -la schematics/ || echo "No schematics directory found"
          PDF_COUNT=$(find schematics -type f -name "*.pdf" 2>/dev/null | wc -l)
          
          echo "PCB Renders:"
          ls -la docs/pictures/ || echo "No pictures directory found"
          PNG_COUNT=$(find docs/pictures -type f -name "*.png" 2>/dev/null | wc -l)
          
          TOTAL_COUNT=$((PDF_COUNT + PNG_COUNT))
          
          if [ "$TOTAL_COUNT" -gt 0 ]; then
            echo "✅ Generated $TOTAL_COUNT output file(s) ($PDF_COUNT PDFs, $PNG_COUNT PNGs)"
          else
            echo "❌ No output files were generated"
            exit 1
          fi
      
      - name: Upload outputs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kicad-outputs
          path: |
            schematics/
            docs/pictures/
          retention-days: 7
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Commit outputs to repository
        run: |
          git add schematics/ docs/pictures/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Generate the latest KiCad documentation (schematics and PCB renders)"
            git push
          fi